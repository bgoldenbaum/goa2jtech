1. Button Labels:
Issue: Magnifying glass icons (Zoom in/out) and the full-screen button are read as “clickable” without indicating their function.
Fix: Add aria-label or title attributes.
<button aria-label="Zoom in button">...</button>
<button aria-label="Zoom out button">...</button>

2. Heading Structure:
Issue: "Test" heading reads as Heading Level 3 instead of Heading Level 1.
Fix: Use <h1> for "Test" and <h2> for "Title."
<h1>Test</h1>
<h2>Title</h2>

3. Required Fields:

Issue: Asterisks are read as "star" without indicating the field is required.
Fix: Use aria-required="true" and add descriptive text.
<label for="field1">Name <span aria-hidden="true">*</span></label>
<input id="field1" aria-required="true" aria-describedby="required-desc"> 
<span id="required-desc" class="sr-only">This field is required.</span>

4. Error Messages:
Issue: "Field is required" message is not read aloud.
Fix: Implement ARIA live regions and adjust focus.
<div aria-live="polite">Field is required</div>

5. Calendar Widget:
Issue: Link address is read aloud before calendar instructions.
Fix: Ensure the instructions are announced first by adjusting focus or ARIA attributes.

6. "Add More" Button:
Issue: The button is not descriptive enough.
Fix: Rename and reposition for clarity.
<button aria-label="Add another email address">Add More</button>

7. Toggle Switch
Issue: The "Primary" toggle switch is being skipped over by screen readers.
Fix: Use role="switch" to identify the element as a toggle switch.
Ensure the aria-checked attribute indicates the current state (true or false).
Provide a clear aria-label to describe the switch's function.

<!-- Example when the switch is off: -->
<div role="switch" aria-checked="false" aria-label="Set as primary email">Primary</div>

<!-- Example when the switch is on: -->
<div role="switch" aria-checked="true" aria-label="Set as primary email">Primary</div>


8. Close ("X") Button:
Issue: The “X” close button is skipped over.
Fix: Add aria-label for screen reader recognition.
<button aria-label="Close modal">X</button>

9. "Type" Label and Input:
Issue: The label "Type" and placeholder "Type here" are confusing.
Fix: Change the label to something more descriptive.
<label for="category">Category</label>
<input id="category" placeholder="Enter category">

10. Form Field Question:
Issue: “Originated in Clio?” does not sound like a question.
Fix: Rephrase it to a full sentence or explicit question "Did this originate in Clio?"

11. Accessibility Widget:
Issue: The widget is read as “Clickable” without indicating its function, and NVDA doesn't recognize it as a modal.
Fix:
Add aria-label for clarity.
<button aria-label="Accessibility options">Accessibility Widget</button>
Ensure modal is properly coded with role="dialog" and aria-modal="true".

12. 1. Navigation via Table of Contents
Issue: When navigating through the table of contents, clicking a category link does not automatically move the focus to the corresponding content section.
// Example code to move focus to the corresponding section
document.querySelectorAll('.toc-link').forEach(link => {
    link.addEventListener('click', function(event) {
        event.preventDefault();
        const targetId = this.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);
        
        // Move focus to the target element
        targetElement.focus();
    });
});
Make sure that the target elements have tabindex="-1" to ensure they can receive focus:
<div id="section1" tabindex="-1">
    <!-- Section content -->
</div>

13. Screen Reader Announcement for Modals
Issue: The screen reader does not automatically announce the content within the modal when it is opened.
// Example code to set focus to the first focusable element within the modal
document.getElementById('openModalButton').addEventListener('click', function() {
    const modal = document.getElementById('myModal');
    
    // Move focus to the modal
    modal.style.display = 'block';
    modal.setAttribute('role', 'dialog');
    modal.setAttribute('aria-modal', 'true');
    
    // Focus on the first input or interactive element in the modal
    const focusableElement = modal.querySelector('input, button, [href], [tabindex]:not([tabindex="-1"])');
    if (focusableElement) {
        focusableElement.focus();
    }
});
Ensure the modal has proper ARIA attributes:
<div id="myModal" role="dialog" aria-modal="true" tabindex="-1">
    <h2 id="modalTitle">Modal Title</h2>
    <p>Modal content goes here...</p>
    <button id="closeModalButton">Close</button>
</div>

14. Reading Content in Sections
Issue: The content of the associated section or table is not automatically read aloud by the screen reader after clicking a category link.
document.querySelectorAll('.toc-link').forEach(link => {
    link.addEventListener('click', function(event) {
        event.preventDefault();
        const targetId = this.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);
        
        // Move focus to the target element to trigger screen reader announcement
        targetElement.focus();
    });
});

15.  Modal Pop-Up Accessibility
Issue:When a modal pops up, the screen reader continues to read the background content.
document.getElementById('openModalButton').addEventListener('click', function() {
    const modal = document.getElementById('myModal');
    const mainContent = document.getElementById('mainContent');

    // Hide the background content from screen readers
    mainContent.setAttribute('aria-hidden', 'true');

    // Move focus to the modal
    modal.style.display = 'block';
    modal.setAttribute('role', 'dialog');
    modal.setAttribute('aria-modal', 'true');
    modal.querySelector('[tabindex]').focus();
});

document.getElementById('closeModalButton').addEventListener('click', function() {
    const modal = document.getElementById('myModal');
    const mainContent = document.getElementById('mainContent');

    // Show the background content to screen readers
    mainContent.removeAttribute('aria-hidden');

    // Hide the modal
    modal.style.display = 'none';
});

Ensure the modal has proper ARIA attributes and focus trapping:

<div id="myModal" role="dialog" aria-modal="true" tabindex="-1">
    <h2 id="modalTitle">Modal Title</h2>
    <p>Modal content goes here...</p>
    <button id="closeModalButton">Close</button>
</div>

